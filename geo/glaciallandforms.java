import java.util.Random;
import java.util.Scanner;
class glaciallandforms{
    public static void main(String[] args){
        Random rand = new Random();
        Scanner user = new Scanner(System.in);
        String[][] x = new String[300][2];
        int length=14;
        int[] z = new int[length];
        int r;
        int temp;
        for(int i=0; i<length; i++){
            z[i]=i;
        }
        for(int i=0; i<length; i++){
            r = rand.nextInt(length);
            temp = z[i];
            z[i] = z[r];
            z[r] = temp;
        }
        x[0][0] = "u-shaped valley"; x[0][1] = "characteristic cross-profile of a valley carved by glacial erosion. rivers have a very narrow point of incision, whereas glaciers have a very wide range of incision.";
        x[1][0] = "hanging valley:"; x[1][1] = "a smaller valley that terminates abruptly high above a main valley. associated with alpine glaciers";
        x[2][0] = "truncated spurs:"; x[2][1] = "ridges that have triangular facets produced by glacial erosion at their lower ends";
        x[3][0] = "rock-basin lakes (tarns):"; x[3][1] = "a lake occupying a depression caused by glacial erosion of bedrock";
        x[4][0] = "cirque:"; x[4][1] = "a steep-sided, half-bowl shaped recess carved into a mountain at the head of a glacial valley. alpine glaciers. where the glacier started. before the glacier comes alive, we pile up snow which just keeps cutting in until it gets enough mass to move and spill over the bowl that was cut. often within the bowl is a little lake, glacial lake within the cirque.";
        x[5][0] = "horn:"; x[5][1] = "the sharp peak that remains after cirques have cut back into a mountain on several sides";
        x[6][0] = "arête:"; x[6][1] = "sharp ridges that separate adjacent glacially carved valleys";
        x[7][0] = "glaciers tend to follow the previously created drainage patterns for rivers and whatnot"; x[7][1] = "";
        x[8][0] = "triangular facets"; x[8][1] = "greated by either fluvial incision along a fault scarp or by being the face of truncated spurs and shit you know what I mean";
        x[9][0] = "trimline"; x[9][1] = "area where the glacier got up to its maximum height. you can see where there is a separation between rock and vegetation(ontop). might have till from line down but not above.";
        x[10][0] = "Paternoster Lakes"; x[10][1] = "could be just till dammed. otherise if theres fractures in the rock, the glacier will pluck the rocks easily out and cause depressions with lakes perhaps.";
        x[11][0] = "Roche Moutonnee"; x[11][1] = "assymetrical mountanous feature kind of like a sand dune. with abrasion on the stoss side(what about melting...I guess thats what abrasion means?), and plucking on the lee side";
        x[12][0] = "till:"; x[12][1] = "the unsorted and unlayered rock debris carried or deposited by a glacier";
        x[13][0] = "erratic:"; x[13][1] = "an ice-transported boulder that has not been derived from the nearby bedrock";
        x[14][0] = "moraines:"; x[14][1] = "a body of till either being carried on a glacier or left behind after a glacier has receded";
        x[15][0] = "lateral moraines:"; x[15][1] = "elongate mounds of till which form along the sides of a valley glacier";
        x[16][0] = "medial moraine:"; x[16][1] = "a single long ridge of till on a glacier, formed by adjacent lateral moraines joining and being carried downglacier";
        x[17][0] = "end moraine:"; x[17][1] = "a ridge of till piled up along the front edge of a glacier";
        x[18][0] = "ground moraine:"; x[18][1] = "even spread of till. a blanket of till deposited by a glacier or released as glacier ice melted";
        x[19][0] = "recessional moraine"; x[19][1] = "a moraine the glacier deposited in the past. The glacier then receded. If the glacier grew it would have flattened the moraine";
        x[20][0] = "outwash"; x[20][1] = "The melt water that comes out of the terminus of the glacier";
        x[21][0] = "sometimes in front of the glacier the meltwater will sort the till/ moraine"; x[21][1] = "";
        x[22][0] = "moraine is usually made of every sized partical you can imagine"; x[22][1] = "";
        x[23][0] = "the water will take the fine stuff down stream"; x[23][1] = "";
        x[24][0] = "you can measure the long axis of the till rocks and if there is a preferred orientation then thats evidence that the glacier ran over the till, otherwise if its just a random orientation then the glacier just dumped the shit randomely"; x[24][1] = "";
        x[25][0] = "ice caps"; x[25][1] = "no continent under them but they still behave like continental glaciers. smaller versions of continental glaciers.";
        x[26][0] = "pro-glacial"; x[26][1] = "in front of the glacier";
        x[27][0] = "sub-glacial"; x[27][1] = "under the glacier";
        x[28][0] = "super-glacial"; x[28][1] = "happening on top of the glacier. For instance, fluvial landforms on top of the glacier like rivers and shit";
        x[29][0] = "Kame Deposit"; x[29][1] = "At least one original wall was up against the ice. a superglacial fluvial feature, the sediments that remain after the ice walls have melted.";
        x[30][0] = "Kame terrace or Kame moraine"; x[30][1] = "the kame deposit is on the wall and makes a terrace, balcony";
        x[31][0] = "ice wall lakes"; x[31][1] = "";
        x[32][0] = "top sets and forsets of a delta, the angular unconformity picture. omg this confusing shit(<57:50)"; x[32][1] = "the forsets are at like a 40 degree angle while the top sets are flat, pro glacial lake;riverbed";
        x[33][0] = "outwash:"; x[33][1] = "the material deposited by the debris-laden meltwater";
        x[34][0] = "drumlins:"; x[34][1] = "bodies of till shaped into streamlined hills(more complicated)";
        x[35][0] = "esker:"; x[35][1] = "a long, sinuous ridge of water-deposited sediment";
        x[36][0] = "kettle:"; x[36][1] = "a depression caused by the melting of a stagnant block of ice that was surrounded by sediment, till. outwash";
        x[37][0] = "Braided Outwash – Often Called A Valley Train"; x[37][1] = "";
        x[38][0] = "when water is put under high pressure and comes out with a lot of force carrying coarse sediment, it can cut into softer bedrock and create AWESOME landforms bitch suck my dick"; x[38][1] = "";
        x[39][0] = "The finger lakes are really "; x[39][1] = "river valleys that glaciers have gone through while thinned out and might have widened a little bit but now are lakes";
        x[40][0] = "FLUTE"; x[40][1] = "Also known as fluted moraine, these are elongate streamlined ridges of sediment that are produced beneath a glacier and which are aligned in the direction of ice flow. They typically occur as numerous parallel ridges, tens of cm’s to a few m’s high and wide, and tens of m’s in length. These rather delicate landforms are best observed close to recently retreated glacier margins, and due to their poor preservation potential are much less commonly found in relation to former ice sheets. boulder with unsorted till elongated mound behind it";
        x[41][0] = "hunter mountain"; x[41][1] = "a glacier might not get around a rock extremely well, old sediments can remain behind the rock";
        x[42][0] = "as the glaciers moved south from the canadian shield, they went from moving over very resistant metamorphic rocks to softer sedimentary rocks and started to dig in further, causing the lakes on the border of the canadian shield"; x[42][1] = "";
        x[43][0] = "drumlins that we are seeing are not formed from ice advancing, formed from recession"; x[43][1] = "";
        x[44][0] = "we dont really know how exactly drumlins are made"; x[44][1] = "The two major hypothesises are that they are either formed from ice under the glacier or water under the glacier";
        x[45][0] = "you need a lot of pressure to have a lake under the ice"; x[45][1] = "";
        x[46][0] = "sheet flow"; x[46][1] = "water flows as a sheet under the ice";
        x[47][0] = "bedforms"; x[47][1] = "how the sediment might form ripples under the ice, in an ice sheet situation";
        x[48][0] = "drumlins might be formed by pressurized water sheet action under ice"; x[48][1] = "or it might be formed simply by the ice scraping away the material around the drumlin to form the drumlin shape apparently";
        x[49][0] = "a drumlin may be full of "; x[49][1] = "till, outwash, bedrock covered in till";
        x[50][0] = "inside a drumlin could be a ripped up piece of lake sediment, pushed and scraped up by ice, not water, but the drumlin next to it could be completely different"; x[50][1] = "";
        x[51][0] = "ice can scrape along and get a bunch of different stuff together and mold it into a final product"; x[51][1] = "";
        x[52][0] = "some drumlins have a bed that can be traced between the 3 drumlins that would suggest it used to be a complete sedimentary sequence that had been cut into those shapes."; x[52][1] = "";
        x[53][0] = "john shaw meltwater hypothesis"; x[53][1] = "a sheet of water moving under pressure causes drumlins and other glacial landforms I suppose.";
        x[54][0] = "ice margin and a pro glacial lake"; x[54][1] = "";
        x[55][0] = "trimline again"; x[55][1] = "";
        x[56][0] = ""; x[56][1] = "";
        x[57][0] = ""; x[57][1] = "";
        x[58][0] = ""; x[58][1] = "";
        x[59][0] = ""; x[59][1] = "";
        x[60][0] = ""; x[60][1] = "";
        x[61][0] = ""; x[61][1] = "";
        x[62][0] = ""; x[62][1] = "";
        x[63][0] = ""; x[63][1] = "";
        x[64][0] = ""; x[64][1] = "";
        x[65][0] = ""; x[65][1] = "";
        x[66][0] = ""; x[66][1] = "";
        x[67][0] = ""; x[67][1] = "";
        x[68][0] = ""; x[68][1] = "";
        x[69][0] = ""; x[69][1] = "";
        x[70][0] = ""; x[70][1] = "";
        x[71][0] = ""; x[71][1] = "";
        x[72][0] = ""; x[72][1] = "";
        x[73][0] = ""; x[73][1] = "";
        x[74][0] = ""; x[74][1] = "";
        x[75][0] = ""; x[75][1] = "";
        x[76][0] = ""; x[76][1] = "";
        x[77][0] = ""; x[77][1] = "";
        x[78][0] = ""; x[78][1] = "";
        x[79][0] = ""; x[79][1] = "";
        x[80][0] = ""; x[80][1] = "";
        x[81][0] = ""; x[81][1] = "";
        x[82][0] = ""; x[82][1] = "";
        x[83][0] = ""; x[83][1] = "";
        x[84][0] = ""; x[84][1] = "";
        x[85][0] = ""; x[85][1] = "";
        x[86][0] = ""; x[86][1] = "";
        x[87][0] = ""; x[87][1] = "";
        x[88][0] = ""; x[88][1] = "";
        x[89][0] = ""; x[89][1] = "";
        x[90][0] = ""; x[90][1] = "";
        x[91][0] = ""; x[91][1] = "";
        x[92][0] = ""; x[92][1] = "";
        x[93][0] = ""; x[93][1] = "";
        x[94][0] = ""; x[94][1] = "";
        x[95][0] = ""; x[95][1] = "";
        x[96][0] = ""; x[96][1] = "";
        x[97][0] = ""; x[97][1] = "";
        x[98][0] = ""; x[98][1] = "";
        x[99][0] = ""; x[99][1] = "";
        x[100][0] = ""; x[100][1] = "";
        x[101][0] = ""; x[101][1] = "";
        x[102][0] = ""; x[102][1] = "";
        x[103][0] = ""; x[103][1] = "";
        x[104][0] = ""; x[104][1] = "";
        x[105][0] = ""; x[105][1] = "";
        x[106][0] = ""; x[106][1] = "";
        x[107][0] = ""; x[107][1] = "";
        x[108][0] = ""; x[108][1] = "";
        x[109][0] = ""; x[109][1] = "";
        x[110][0] = ""; x[110][1] = "";
        x[111][0] = ""; x[111][1] = "";
        x[112][0] = ""; x[112][1] = "";
        x[113][0] = ""; x[113][1] = "";
        x[114][0] = ""; x[114][1] = "";
        x[115][0] = ""; x[115][1] = "";
        x[116][0] = ""; x[116][1] = "";
        x[117][0] = ""; x[117][1] = "";
        x[118][0] = ""; x[118][1] = "";
        x[119][0] = ""; x[119][1] = "";
        x[120][0] = ""; x[120][1] = "";
        x[121][0] = ""; x[121][1] = "";
        x[122][0] = ""; x[122][1] = "";
        x[123][0] = ""; x[123][1] = "";
        x[124][0] = ""; x[124][1] = "";
        x[125][0] = ""; x[125][1] = "";
        x[126][0] = ""; x[126][1] = "";
        x[127][0] = ""; x[127][1] = "";
        x[128][0] = ""; x[128][1] = "";
        x[129][0] = ""; x[129][1] = "";
        x[130][0] = ""; x[130][1] = "";
        x[131][0] = ""; x[131][1] = "";
        x[132][0] = ""; x[132][1] = "";
        x[133][0] = ""; x[133][1] = "";
        x[134][0] = ""; x[134][1] = "";
        x[135][0] = ""; x[135][1] = "";
        x[136][0] = ""; x[136][1] = "";
        x[137][0] = ""; x[137][1] = "";
        x[138][0] = ""; x[138][1] = "";
        x[139][0] = ""; x[139][1] = "";
        x[140][0] = ""; x[140][1] = "";
        x[141][0] = ""; x[141][1] = "";
        x[142][0] = ""; x[142][1] = "";
        x[143][0] = ""; x[143][1] = "";
        x[144][0] = ""; x[144][1] = "";
        x[145][0] = ""; x[145][1] = "";
        x[146][0] = ""; x[146][1] = "";
        x[147][0] = ""; x[147][1] = "";
        x[148][0] = ""; x[148][1] = "";
        x[149][0] = ""; x[149][1] = "";
        x[150][0] = ""; x[150][1] = "";
        x[151][0] = ""; x[151][1] = "";
        x[152][0] = ""; x[152][1] = "";
        x[153][0] = ""; x[153][1] = "";
        x[154][0] = ""; x[154][1] = "";
        x[155][0] = ""; x[155][1] = "";
        x[156][0] = ""; x[156][1] = "";
        x[157][0] = ""; x[157][1] = "";
        x[158][0] = ""; x[158][1] = "";
        x[159][0] = ""; x[159][1] = "";
        x[160][0] = ""; x[160][1] = "";
        x[161][0] = ""; x[161][1] = "";
        x[162][0] = ""; x[162][1] = "";
        x[163][0] = ""; x[163][1] = "";
        x[164][0] = ""; x[164][1] = "";
        x[165][0] = ""; x[165][1] = "";
        x[166][0] = ""; x[166][1] = "";
        x[167][0] = ""; x[167][1] = "";
        x[168][0] = ""; x[168][1] = "";
        x[169][0] = ""; x[169][1] = "";
        x[170][0] = ""; x[170][1] = "";
        x[171][0] = ""; x[171][1] = "";
        x[172][0] = ""; x[172][1] = "";
        x[173][0] = ""; x[173][1] = "";
        x[174][0] = ""; x[174][1] = "";
        x[175][0] = ""; x[175][1] = "";
        x[176][0] = ""; x[176][1] = "";
        x[177][0] = ""; x[177][1] = "";
        x[178][0] = ""; x[178][1] = "";
        x[179][0] = ""; x[179][1] = "";
        x[180][0] = ""; x[180][1] = "";
        x[181][0] = ""; x[181][1] = "";
        x[182][0] = ""; x[182][1] = "";
        x[183][0] = ""; x[183][1] = "";
        x[184][0] = ""; x[184][1] = "";
        x[185][0] = ""; x[185][1] = "";
        x[186][0] = ""; x[186][1] = "";
        x[187][0] = ""; x[187][1] = "";
        x[188][0] = ""; x[188][1] = "";
        x[189][0] = ""; x[189][1] = "";
        x[190][0] = ""; x[190][1] = "";
        x[191][0] = ""; x[191][1] = "";
        x[192][0] = ""; x[192][1] = "";
        x[193][0] = ""; x[193][1] = "";
        x[194][0] = ""; x[194][1] = "";
        x[195][0] = ""; x[195][1] = "";
        x[196][0] = ""; x[196][1] = "";
        x[197][0] = ""; x[197][1] = "";
        x[198][0] = ""; x[198][1] = "";
        x[199][0] = ""; x[199][1] = "";
        x[200][0] = ""; x[200][1] = "";
        x[201][0] = ""; x[201][1] = "";
        x[202][0] = ""; x[202][1] = "";
        x[203][0] = ""; x[203][1] = "";
        x[204][0] = ""; x[204][1] = "";
        x[205][0] = ""; x[205][1] = "";
        x[206][0] = ""; x[206][1] = "";
        x[207][0] = ""; x[207][1] = "";
        x[208][0] = ""; x[208][1] = "";
        x[209][0] = ""; x[209][1] = "";
        x[210][0] = ""; x[210][1] = "";
        x[211][0] = ""; x[211][1] = "";
        x[212][0] = ""; x[212][1] = "";
        x[213][0] = ""; x[213][1] = "";
        x[214][0] = ""; x[214][1] = "";
        x[215][0] = ""; x[215][1] = "";
        x[216][0] = ""; x[216][1] = "";
        x[217][0] = ""; x[217][1] = "";
        x[218][0] = ""; x[218][1] = "";
        x[219][0] = ""; x[219][1] = "";
        x[220][0] = ""; x[220][1] = "";
        x[221][0] = ""; x[221][1] = "";
        x[222][0] = ""; x[222][1] = "";
        x[223][0] = ""; x[223][1] = "";
        x[224][0] = ""; x[224][1] = "";
        x[225][0] = ""; x[225][1] = "";
        x[226][0] = ""; x[226][1] = "";
        x[227][0] = ""; x[227][1] = "";
        x[228][0] = ""; x[228][1] = "";
        x[229][0] = ""; x[229][1] = "";
        x[230][0] = ""; x[230][1] = "";
        x[231][0] = ""; x[231][1] = "";
        x[232][0] = ""; x[232][1] = "";
        x[233][0] = ""; x[233][1] = "";
        x[234][0] = ""; x[234][1] = "";
        x[235][0] = ""; x[235][1] = "";
        x[236][0] = ""; x[236][1] = "";
        x[237][0] = ""; x[237][1] = "";
        x[238][0] = ""; x[238][1] = "";
        x[239][0] = ""; x[239][1] = "";
        x[240][0] = ""; x[240][1] = "";
        x[241][0] = ""; x[241][1] = "";
        x[242][0] = ""; x[242][1] = "";
        x[243][0] = ""; x[243][1] = "";
        x[244][0] = ""; x[244][1] = "";
        x[245][0] = ""; x[245][1] = "";
        x[246][0] = ""; x[246][1] = "";
        x[247][0] = ""; x[247][1] = "";
        x[248][0] = ""; x[248][1] = "";
        x[249][0] = ""; x[249][1] = "";
        x[250][0] = ""; x[250][1] = "";
        x[251][0] = ""; x[251][1] = "";
        x[252][0] = ""; x[252][1] = "";
        x[253][0] = ""; x[253][1] = "";
        x[254][0] = ""; x[254][1] = "";
        x[255][0] = ""; x[255][1] = "";
        x[256][0] = ""; x[256][1] = "";
        x[257][0] = ""; x[257][1] = "";
        x[258][0] = ""; x[258][1] = "";
        x[259][0] = ""; x[259][1] = "";
        x[260][0] = ""; x[260][1] = "";
        x[261][0] = ""; x[261][1] = "";
        x[262][0] = ""; x[262][1] = "";
        x[263][0] = ""; x[263][1] = "";
        x[264][0] = ""; x[264][1] = "";
        x[265][0] = ""; x[265][1] = "";
        x[266][0] = ""; x[266][1] = "";
        x[267][0] = ""; x[267][1] = "";
        x[268][0] = ""; x[268][1] = "";
        x[269][0] = ""; x[269][1] = "";
        x[270][0] = ""; x[270][1] = "";
        x[271][0] = ""; x[271][1] = "";
        x[272][0] = ""; x[272][1] = "";
        x[273][0] = ""; x[273][1] = "";
        x[274][0] = ""; x[274][1] = "";
        x[275][0] = ""; x[275][1] = "";
        x[276][0] = ""; x[276][1] = "";
        x[277][0] = ""; x[277][1] = "";
        x[278][0] = ""; x[278][1] = "";
        x[279][0] = ""; x[279][1] = "";
        x[280][0] = ""; x[280][1] = "";
        x[281][0] = ""; x[281][1] = "";
        x[282][0] = ""; x[282][1] = "";
        x[283][0] = ""; x[283][1] = "";
        x[284][0] = ""; x[284][1] = "";
        x[285][0] = ""; x[285][1] = "";
        x[286][0] = ""; x[286][1] = "";
        x[287][0] = ""; x[287][1] = "";
        x[288][0] = ""; x[288][1] = "";
        x[289][0] = ""; x[289][1] = "";
        x[290][0] = ""; x[290][1] = "";
        x[291][0] = ""; x[291][1] = "";
        x[292][0] = ""; x[292][1] = "";
        x[293][0] = ""; x[293][1] = "";
        x[294][0] = ""; x[294][1] = "";
        x[295][0] = ""; x[295][1] = "";
        x[296][0] = ""; x[296][1] = "";
        x[297][0] = ""; x[297][1] = "";
        x[298][0] = ""; x[298][1] = "";
        x[299][0] = ""; x[299][1] = "";
        String n;
        while(true){
            for(int i=0; i<length; i++){
                for(int j=0; j<2; j++){
                    System.out.print(x[z[i]][j]); 
                    n = user.nextLine();
                }
                System.out.println();
            }
        }
    }
}